Question 1

This question is a code-tracing practice. Please trace the code manually before verifying the answers using IDLE.

What will you see on IDLE if you evaluated the following code?

j = 0
for i in range(10):
    if i >= 9: break
    if j == 8:
        j = j + 2
        continue
    j = j + 1


print(i, j)

Ans:

9 10

Question 2: sum of first n odd numbers - iterative for loop!!

Using a for loop, write an iterative function sum_odd_n that computes the sum of the first n odd numbers, i.e. it returns 1 + 3 + 5 + .... + (2n - 1). You may assume that n is always a positive integer.

Ans:

def sum_odd_n(n):
    """Sums first n odd integers starting from 1 (inclusive) using a for loop"""
    sum = 0
    for x in range(1,2*n,2):
        sum += x
    return sum

Question 3: Sum of first n odd numbers - iterative while loop!!

Using a while loop, write an iterative function sum_odd_n that computes the sum of the first n odd numbers, i.e. it returns 1 + 3 + 5 + .... + (2n - 1). You may assume that n is always a positive integer.

Ans:

def sum_odd_n(n):
    sum = 0
    curr = 1
    i = 0
    while i < n: 
        sum = sum + curr 
        curr = curr + 2
        i = i + 1
    return sum
    
Question 4: Sum of first n odd numbers -recursive!

Write a recursive function sum_odd_n that computes the sum of the first n odd numbers, i.e. it returns 1 + 3 + 5 + .... + (2n - 1). You may assume that n is always a positive integer.

Ans:

def sum_odd_n(n):
    """Sums odd integers from 1 (inclusive) to n using recursion"""
    if n>0:
        if n==1:
            return 1
        else:
            return 2*n-1 + sum_odd_n(n-1)
            
        
Question 5: sum of first n squares -- iterative for loop!!

Complete the following function that uses a for loop to compute the sum of the squares of the first n numbers.

def sum_n_squares(n):
    result = 0
    for counter in range(n + 1):
       # Your code here   

    return result
    
 Ans:
 
 def sum_n_squares(n):
    result = 0
    for counter in range(1,n+1):
        result = result + (counter * counter)    
    return result
    
    
Question 6: sum of first n squares -- iterative while loop!!

Complete the following function that uses the while loop to compute the sum of the first n square numbers.

def sum_n_squares(n):
    counter, result = 1, 0
    while counter <= n:
        # Your code here
        
    return result
    
 Ans:
 
 def sum_n_squares(n):
    counter, result = 1, 0
    while counter <= n:
        result = result + (counter * counter)
        counter += 1
    return result
    
Question 7: sum of first n squares -- recursive!

Complete the following recursive function sum_n_squares(n) such that it will compute the sum of the first n square numbers, i.e. .

def sum_n_squares(n):

    # some code missing

    return n ** 2 + sum_n_squares(n - 1)

You may assume that n is always a positive integer.

Ans:

def sum_n_squares(n):
    if n == 1:
        return n ** 2
    else:
        return n ** 2 + sum_n_squares(n - 1)
        
        
        
Question 8: Wishful thinking: writing stubs.

The wishful thinking process involves one assuming that a required function exists and does the right thing. This function is implemented only later on. In practice, we write stubs in place of the fully implemented function.

Stubs have been written for spawn_balrog, balrog_attack and take_defensive_action. Instead of being fully implemented, their bodies are empty except for a docstring and a pass statement. A docstring is a string describing the function and may be displayed using the command help(funct_name) (Try it!). It comes after the function name and arguments and is typically enclosed in triple quotes. The pass statement indicates to the Python interpreter that it should move on to interpret the rest of the program instead of raising an error. When the functions are finally implemented, the pass statements are removed and the docstrings are updated.

Your job is to identify the remaining functions that have been wishfully used, but for which stubs have not been created. Write those stubs! Be sure to leave the function unimplemented! For docstrings in this exercise, it suffices to write a simple sentence on what (you think) the function should do. (Hint: If you received error messages after running your code, do pay attention to them since they will help you solve the problem.)

def defeat_balrog(protagonist):    
    def spawn_balrog():
        """Spawns and returns a stubborn balrog"""
        pass
    def balrog_attack(balrog, person):
        """Returns an attack move from the balrog's repertoire"""
        pass
    cave_balrog = spawn_balrog()
    is_balrog_defeated = False
    yell(protagonist, 'You cannot pass!')
    while not is_balrog_defeated:
        current_attack = balrog_attack(cave_balrog, protagonist)
        if current_attack != None:
            take_defensive_action(protagonist, current_attack)
        yell(protagonist, 'YOU SHALL NOT PASS!')
        take_offensive_action(protagonist, cave_balrog)
        is_balrog_defeated = True
    return True

def take_defensive_action(attacked_entity, attack_move):
    """
    attacked_entity anticipates attack_move and defends himself.
    """
    pass
#
# Your stubs will go here
#
defeat_balrog('gandalf')

Ans:


#
# Write the missing stubs here!
#
def yell(protagonist, message):
    """Protrahonist yells a message"""
    pass
    
def take_offensive_action(protagonist, cave_balrog):
    """
    protagonist anticipates cave_balrog and takes offensive action.
    """
    pass
def defeat_balrog(protagonist):    
    def spawn_balrog():
        """Spawns and returns a stubborn balrog"""
        pass
    def balrog_attack(balrog, person):
        """Returns an attack move from the balrog's repertoire"""
        pass
    cave_balrog = spawn_balrog()
    is_balrog_defeated = False
    yell(protagonist, 'You cannot pass!')
    while not is_balrog_defeated:
        current_attack = balrog_attack(cave_balrog, protagonist)
        if current_attack != None:
            take_defensive_action(protagonist, current_attack)
        yell(protagonist, 'YOU SHALL NOT PASS!')
        take_offensive_action(protagonist, cave_balrog)
        is_balrog_defeated = True
    return True
def take_defensive_action(attacked_entity, attack_move):
    """
    attacked_entity anticipates attack_move and defends himself.
    """
    pass
#
# Your stubs will go here
#
defeat_balrog('gandalf')


Question 9

This question is a code-tracing practice. Please trace the code manually before verifying the answers using IDLE.

What's the output of the code below?

x, y = 1, 9
def foo(x, y):
    while y > x:
        y = y // 2
        x = x + 1

foo(x, y)

print(x) # => ?
print(y) # => ?

Ans:

print(x) # => 1
print(y) # => 9

Question 10

def foo(n):
    if n == 0:
        return 0
    else:
        return 2 * n + foo(n - 1)

What's the time complexity of this function in Big-O notation?

Ans:

O(n)

