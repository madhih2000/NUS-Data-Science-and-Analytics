Question 1: deep reverse

Write the recursive function deep_reverse that takes in a list as argument and returns a list with its elements reversed and with all sublists deep-reversed as well.

Example:
>>>deep_reverse([1,2,[3,4],[[5]],[6,[7,8],9]])
[[9,[8,7],6],[[5]],[4,3],2,1]

Ans:

def deep_reverse(lst):
    if lst == []:
        return lst
    elif not is_list(lst[0]):
        return deep_reverse(lst[1:]) + [lst[0]]
    else:
        return deep_reverse(lst[1:]) + [deep_reverse(lst[0])]
    

def is_list(lst):
    return isinstance(lst, list)
    
    

Question 2: deep sum

As a test of the concepts introduced in deep_reverse, write the recursive function deep_sum that takes a list as argument and returns as its value the sum of all the number elements in the list and its sublists.

Example:
>>>deep_sum([1, 2, [3, 4, [[5]], [[6], [7, 8], 9], 10]])
55

Ans:

def deep_sum(lst):
    if type(lst) != list:
        return lst
    if lst == []:
        return 0
    return deep_sum(lst[0]) + deep_sum(lst[1:])
    

Question 3: number

Define the class Number which makes a 'number object'. The object has five methods plus,times,divide, minus and value. You can assume that the integer value that the number object contains is always divisible to return an integer value.

Example:
>>>two=Number(2)
>>>twelve=Number(12)
>>>thirteen=Number(13)
>>>thirteen.value()
13
>>>five=Number(5)
>>>eight=thirteen.minus(five)
>>>eight.value()
8
>>>twenty_four=two.times(twelve)
>>>twenty_four.value()
24

Ans:

class Number(object):
    # complete the class definition #
    def __init__(self, num):
        self.num = num
    
    def value(self):
        return self.num
        
    def minus(self, other):
        a = self.num - other.num
        return Number(a)
    
    
    def times(self, other):
        a = self.num * other.num
        return Number(a)
    
    def plus(self, other):
        a = self.num + other.num
        return Number(a)
    
    def divide(self, other):
        a = self.num / other.num
        return Number(a)
    
### Uncomment the lines below ###
three=Number(3)
ten=Number(10)
seven=ten.minus(three)
twentyone=seven.times(three)
five=Number(5)
two=ten.divide(five)
### Uncomment the lines above ###


Question 4: Modified number

Normally, we will have problem when divide by zero. Modify Number to handle division by zero in this way:

Example:
>>>zero=Number(0)
>>>one=Number(1)
>>>something=one.divide(zero)
>>>something.value()
"Undefined"
>>>another_thing = something.plus(one)
>>>another_thing.value()
"Undefined"
>>>something_else=something.times(one)
>>>something_else.value()
"Undefined"
>>>something_else_again=something.minus(one)
>>>something_else_again.value()
"Undefined"
>>>last_thing=something.divide(one)
>>>last_thing.value()
"Undefined"


Ans:

class Number(object):
    # complete the class definition #
    def __init__(self, num):
        self.num = num
    
    def value(self):
        return self.num
        
    def minus(self, other):
        if self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num - other.num
        return Number(a)
    
    
    def times(self, other):
        if self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num * other.num
        return Number(a)
    
    def plus(self, other):
        if self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num + other.num
        return Number(a)
    
    def divide(self, other):
        if other.num == 0:
            a = "Undefined"
        elif self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num / other.num
        return Number(a)


### Uncomment the lines below ###

seventeen = Number(17)
four = Number(4)
zero = Number(0)

thirteen = seventeen.minus(four)
fiftytwo = thirteen.times(four)

blackjack=seventeen.plus(four)
something=blackjack.divide(zero)
another_thing=blackjack.plus(something)
something_else=another_thing.divide(blackjack)

### Uncomment the lines above ###


Question 5: last number

Finally, modify your Number class to implement a method spell. Notice the format of the result, including the commas. Also note that spell will work for numbers below 10 million.

>>> elite_number=Number(1337)
>>> elite_number.spell()
"one thousand, three hundred and thirty seven"
>>> good_day_number = Number(210792)
>>> good_day_number.spell()
>>> "two hundred and ten thousand, seven hundred and ninety two"
>>> bigno = good_day_number.times(elite_number)
>>> bigno.spell()
"really large number"

Ans:

ones = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine')

twos = ('ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen')

tens = ('twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety', 'hundred')

suffixes = ('', 'thousand,', 'million,', 'billion,')

def process(number, index):
    
    if number=='0':
        return 'zero'
    
    length = len(number)
    
    if(length > 3):
        return False
    
    number = number.zfill(3)
    words = ''
 
    hdigit = int(number[0])
    tdigit = int(number[1])
    odigit = int(number[2])
    
    words += '' if number[0] == '0' else ones[hdigit]
    words += ' hundred and ' if not words == '' else ''
    
    if(tdigit > 1):
        words += tens[tdigit - 2]
        words += ' '
        words += ones[odigit]
    
    elif(tdigit == 1):
        words += twos[(int(tdigit + odigit) % 10) - 1]
        
    elif(tdigit == 0):
        words += ones[odigit]

    if(words.endswith('zero')):
        words = words[:-len('zero')]
    else:
        words += ' '
     
    if(not len(words) == 0):    
        words += suffixes[index]
        
    return words;
    
def getWords(number):
    length = len(str(number))
    
    count = length // 3 if length % 3 == 0 else length // 3 + 1
    copy = count
    words = []
 
    for i in range(length - 1, -1, -3):
        words.append(process(str(number)[0 if i - 2 < 0 else i - 2 : i + 1], copy - count))
        count -= 1;

    final_words = ''
    for s in reversed(words):
        temp = s + ' '
        final_words += temp
    
    return final_words.rstrip()
# End Main Logic


class Number(object):
    # complete the class definition #
    def __init__(self, num):
        self.num = num
    
    def value(self):
        return self.num
        
    def minus(self, other):
        if self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num - other.num
        return Number(a)
    
    def spell(self):
        if self.num > 10000000:
            return "really large number"
        else:
            return getWords(self.num)
    
    
    def times(self, other):
        if self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num * other.num
        return Number(a)
    
    def plus(self, other):
        if self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num + other.num
        return Number(a)
    
    def divide(self, other):
        if other.num == 0:
            a = "Undefined"
        elif self.value() == "Undefined" or other.value() == "Undefined":
            a = "Undefined"
        else:
            a = self.num / other.num
        return Number(a) 
    
    
### Uncomment the lines below ###
    
elite_number=Number(1337)
good_day_number=Number(210792)
bigno=good_day_number.times(elite_number)
### Uncomment the lines above ###


Question 6: power set

Write the function power_set that takes in a list, and returns the power set of that list. The power set is a list that includes all possible subsets of the given list including the null set. Note that the order of the subsets is not important in this question.

Example:
>>>power_set([1,2,3])
[[1,2,3],[1,2],[1,3],[2,3],[1],[2],[3],[]]

Ans:

def power_set(lst):
    final = []
    x = len(lst)
    for i in range(1 << x):
        final.append([lst[j] for j in range(x) if (i & (1 << j))])
    return final


Question 7: power set check

Write the function power_set_check that returns True if the list is a power set. The power set is a list that includes all possible subsets of the given list including the null set. Note that the order of the subsets is not important in this question For simplicity, you may assume there will be no duplicate sub-sets or nested null sets.

Example:
>>>power_set_check([[1,2,3],[1,2],[1,3],[2,3],[1],[2],[3],[]])
True
>>>power_set_check([[1,2,3]])
False

Ans:

def power_set(lst):
    final = []
    x = len(lst)
    for i in range(1 << x):
        final.append([lst[j] for j in range(x) if (i & (1 << j))])
    return final


def power_set_check(lst):
    length = 0
    index = 0
    for i in range(len(lst)):
        if len(lst[i]) > length:
            length = len(lst[i])
            index = i
    checklist = lst[index]
    power = power_set(checklist)
    check =  all(item in lst for item in power)
    print(power)
    print(lst)
    if check is True:
        return True
    else:
        return False


Question 8

Suppose we have enumerate_interval,accumulate,map,filter as defined below. Produce the following sequences using these functions (you may add additional functions if necessary).

[1, 2, 3, 4, 5, 6, 7, 8]
[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]
[1, 9, 25, 49, 81, 121]
[1, 1, 9, 2, 25, 3, 49, 4, 81, 5]
[20, 16, 14, 10, 8, 4, 2]



Note: You should try to only use map, filter, enumerate and accumulate to solve this question!

Ans:

def enumerate_interval(min, max):
    return list(range(min, max+1))

def map(fn, seq):
    if seq == []:
        return []
    else:
        return [fn(seq[0]),] + map(fn, seq[1:])

def filter(pred, seq):
    if seq == []:
        return []
    elif pred(seq[0]):
        return [seq[0],] + filter(pred, seq[1:])
    else:
        return filter(pred, seq[1:])

def accumulate(fn, initial, seq):
    if seq == []:
        return initial
    else:
        return fn(seq[0], 
                  accumulate(fn, initial, seq[1:]))


# Leave your answers below   
    
def part_i():
    '''code for [1, 2, 3, 4, 5, 6, 7, 8]'''
    return enumerate_interval(1,8)


def part_ii():
    '''code for [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]'''
    lst = enumerate_interval(5,60)
    return list(filter(lambda x: (x % 5 == 0), lst))

def part_iii():
    '''code for [1, 9, 25, 49, 81, 121]'''
    lst = enumerate_interval(1,11)
    lst = list(filter(lambda x: x % 2 != 0, lst))
    final = list(map(lambda x: x**2, lst))
    return final

def part_iv():
    '''code for [1, 1, 9, 2, 25, 3, 49, 4, 81, 5]'''
    lst1 = enumerate_interval(1,5)
    lst2 = enumerate_interval(1,9)
    lst2 = list(filter(lambda x: x % 2 != 0, lst2))
    final = list(map(lambda x: x**2, lst2))
    res = lst1 + final
    res[::2] = final
    res[1::2] = lst1
    return res

def part_v():
    '''code for [20, 16, 14, 10, 8, 4, 2]'''
    lst = enumerate_interval(2, 20)
    lst2 = list(filter(lambda x: x % 2 == 0, lst))[::-1]
    lst3 = list(filter(lambda x: x % 6 !=0, lst2))
    
    return lst3


Question 9: stack

In this question, you will learn to build a prefix to infix converter. To achieve this, we first need to build a stack. This data structure will assist in building the converter. Implement a stack, which will accept the functions below in the example.

>>>stk=make_stack()
>>>stk('push',1)
>>>stk('push',2)
>>>stk('push',3)
>>>stk('peek')
3
>>>stk('pop')
3
>>>stk('peek')
2
>>>stk('size')
2

Ans:

def make_stack():
    stack = []
    def mf(msg, inp = 0):
        if msg == "push":
            stack.append(inp)
        elif msg == "peek":
            return stack[-1]
            
        elif msg == "pop":
            item = stack.pop()
            return item
        
        elif msg == "size":
            return len(stack)
    return mf
        
            
Question 10: prefix_infix

Using the stack you created, write the function prefix_infix that takes in a prefix expression (represented as a list) and returns the expression in fully parenthesized infix notation. Consider expressions involving only binary operators(+,-,*,/) You may find information regarding prefix here:
http://en.wikipedia.org/wiki/Polish_notation

Example:
>>>prefix_infix(['+',['*',5,4],['-',2,1]])
"((5 * 4) + (2 - 1))"

Ans:

def prefix_infix(expression):
    if isinstance(expression, list):
        op, left, right = expression
        return '('+ prefix_infix(left) + " " + op + " " + prefix_infix(right) + ')'
    else:
        return str(expression)
        

                
