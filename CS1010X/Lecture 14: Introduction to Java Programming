Question 1: ++

What is printed by the following code fragment? (This is more for fun to see that Java can be ugly here.)

int x = 2;
int y = 2;
x = ++x > y ? ++x + x++ : --y + y--;
System.out.println(x);

Ans:

8

Question 2

Consider the following two lines of input:

    100 is
    perfect

What will be printed out by the following segment of code given the above input?
Scanner input = new Scanner(System.in);
int number = input.nextInt();
char character = input.next().charAt(1);
String string = input.nextLine();
System.out.println(number + "'" + character + " is" + string);

Ans:

100's is

Question 3

Which code determines the int value data which is closest to, but not greater than, a double value b?

Ans:

int data = (int) Math.floor(b)

Question 4

Which is a valid use of variable value as shown below:

int i = 0;
double value = 1.2;
String str = new String("1.2");

Ans:

value = ++i

Question 5: Swap

We have the following 4 versions of swap to try to swap the values of a with b in swap1 and swap3, and a[i] with a[j] in swap2 and swap4. Which of the given options is correct?

public static void swap1 (int a, int b) {
    int temp = a;
    a = b;
    b = temp;
}

public static void swap2 (int [] a, int i, int j) {
    int temp = a[i];
    a[i] = a[j];
    a[j] = temp;
}

public static void swap3 (int a, int b) {
    a, b = b, a;
}

public static void swap4 (int [] a, int i, int j) {
    a[i], a[j] = a[j], a[i];
}

Ans:

swap2 can perform the mentioned swap as needed.

Question 6: Recursion

Two Java methods reX and reY are shown below. What will reY(reX(2)) return?

public static int reX(int x) {
   if (x==0) return x;
   return reX(x-1) + reY(x-1);
}

public static int reY(int y) {
   if (y==0) return y+1;
   return reX(y-1) + reY(y-1) + y;
}

Ans:

11

Question 7: Factorial

Write a function factorial that takes in an integer argument and returns its factorial.

Ans:

public int factorial(int n) {
    if (n < 0){
        return -1;
    }
    else if (n == 0) {
    return 1; 
    }
    else{
    return n * factorial(n-1); 
    }
}


Question 8: Area of circle

Complete the function that computes the area of a circle given a radius input. The main function that obtains a user input and prints the output has already been written for you. You may assume that the radius will always be a non-negative integer.

Ans:

public double area_of_circle(int radius) {
    // Write your code here
    // Do not modify any other code
    // You may need Math.PI as Archimedes' constant
    double area = Math.PI * radius * radius;
    return area;
}


Question 9: Greatest Common Divisor

Using the Euclidean algorithm, determine the greatest common divisor of the two arguments.

Note: You may assume that the inputs of the two arguments are positive integers.

To refresh your memory, the Euclidean algorithm has been provided for you in python.

def gcd(a,b):
    while b != 0:
        a,b = b,a%b
    return a
    
  
Ans:

public int gcd(int x, int y) {
    // Write your code here
    // Do not modify any other code
    if (y == 0){
        return x;
    }
    return gcd(y, x % y);
    
}


Question 10

What will the output be?

char x = 'a';
switch(x)
{
    case 'a':
        System.out.print("1");
    case 'b':
        System.out.print("2");
    case 'c':
        System.out.print("3");
        break;
    default:
        System.out.print("4");
}

Ans:

123

Question 11

What is the output of the following code fragment?

int a[] = {1, 2, 3, 4, 5};
int i, j, result;
i = a[0]++;
j = a[i++];
result = i + j;
printf("%d", result);


Ans:

4

Question 12: Arrays

Write a function that returns the sum of the first n numbers in a num_array of size 10. If n is an invalid number (i.e. not within 0 to 10 inclusive), return the value -1 instead to indicate an error.


Ans:

public int num_array[] = {3, 4, 6, 1, 0, 9, 8, 6, 2, 5};

public int nth_sum_of_num_array(int n) {
    // Write your code here
    // Do not modify any other code
    int sum = 0;
    if (n >=0 && n <= 10){
        for (int i = 0; i < n; i++){
            sum = sum + num_array[i];  
        }
    return sum;
    }
    else{
        return -1;
    }
}

