Question 1

By this time, you should be familiar with the use of parentheses to specify operator precedence. For example, the parentheses in a = (1 + 3) * 5 tells the Python interpreter that it should perform the computation 1+3 => 4, then compute 4 * 5 and finally give a a value of 20.

Now that you have learnt about tuples, it is important to distinguish them from parentheses.

Given that t = (1,2,3,4) and x=(1,2), which of the following are valid tuple operations?

Ans:

t + (2,)

t * (3)

t + x

t + (x,)

x + ((2,3,4))

t + (('45',) + (3, ('3)' + '3')))

Question 2: Tuplify

Write a function tuplify that accepts a positive integer as a parameter and returns a tuple containing individual digits of the positive integer.

Ans:

def tuplify(number):
    res = [int(x) for x in str(number)] 
    return tuple(res)
    
Question 3: Untuplify

Write a function untuplify that accepts a tuple containing single-digit numbers and returns a positive integer formed from concatenating the digits together.

You may assume that the first element in the tuple will be non-zero.

Ans:

def untuplify(tpl):
    # Convert Tuple to integer 
    # Using int() + join() + map() 
    res = int(''.join(map(str, tpl))) 
    return res
    
    
Question 4: Sum revisited

Define a function sum_tuple that takes an argument tuple and returns the sum of all values in the tuple.

Note that you are not allowed to use the in-built sum function for this question.

Ans:

def sum_tuple(t):
    lst = list(t)
    sum = 0
    for i in lst:
        sum += i
    return sum
    
 
Question 5: Max and min revisited

Define a function max_and_min that takes an argument t returns the largest and smallest values of the values within the argument. The return value should be a tuple containing the largest and smallest value, in that order. Use the recursive approach.

Note that you are not allowed to use the in-built max and min functions for this question
       
Ans:

def max_and_min(t):
    """Returns a tuple containing the max and min value in tuple t"""
    x = list(t)
    # this function fails if the list length is 0 
    minimum = maximum = x[0]
    for i in x[1:]:
        if i < minimum: 
            minimum = i 
        else: 
            if i > maximum: maximum = i
    return ((maximum, minimum))
    
 
Question 6: Fibonacci

Write a function make_fibonacci that accepts a parameter n which generates and returns a tuple containing the first n+1 terms of the fibonacci sequence. You may assume that n >= 0


Ans:


def make_fibonacci(n):
    if n == 0:
        return (0,)
    count = 1
    x = [0]
    a, b = 0, 1
    while n >= count:
        count += 1
        a, b = b, a+b
        x += [a]
    return tuple(x)

    
