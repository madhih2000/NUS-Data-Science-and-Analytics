Question 1

Someone wrote a function to calculate n-factorial. The function takes in an input n and returns the value 1 * 2 * 3 * â€¦ * n.
What's wrong with the piece of code below? Fix the code so that it passes all test cases. You may assume that n is always positive (n >= 1).

Hint: There is more than 1 mistake. You have to maintain the while loop.

Ans:

def factorial(n):
    i = 1
    result = 1
    while i <= n:
        result = result * i
        i += 1
    return result
 
Question 2

It's a common mistake that you forget to increase the counter when you use the while loop. So someone else implemented n-factorial using the for loop. What is wrong with his code? Fix it so that it passes all test cases.


You may again assume that n is positive. You have to keep the for loop.

Ans:

def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result = result * i
    return result
    
Question 3

When using loops (iteration), you have to be careful with the boundary indices. Now read the recursive implementation below. What's wrong again? Fix the code so that it passes all test cases.

Assume that n is always positive. You have to use recursion.

Ans:


def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)

Question 4

Xiangxin has written some code below to practice functions.

x = 10
y = 20

def foo(x, y, z):
    return x * y / bar(z)

def bar(x):
    if x > 5:
        return x
    else:
        return 0

print(foo(x, y, 12))
z = 4
print(foo(x, y, z))
print(bar(3))

But when she ran the code, she got the following output:
16.666666666666668
Traceback (most recent call last):
File "/Users/xiangxinsun/Documents/CS1010S/exercise1.py", line 15, in 
print(foo(x, y, z))
File "/Users/xiangxinsun/Documents/CS1010S/exercise1.py", line 5, in foo
return x * y / bar(z)
ZeroDivisionError: division by zero
Where did it go wrong? Select all correct statements below:

Ans:

The source of the error is in line 5, return x * y / bar(z).
The error type is DivisionError. So that the bar(z) must be 0 when error was raised.
print(bar(3)) was never executed.
