Question 1: OOP Concept

A class can have many methods with the same name as long as the number of parameters or the types of parameters are different. This OOP concept is known as

Ans:

Method Overloading

Question 2: Object

Which of the following statements is false about objects?

Ans:

Each object reference can only point to one object throughout the execution of the program

Question 3: Class Constructor

What happens at compile-time if the programmer forgets to include a constructor in the class definition?

Ans:

A default constructor with no arguments and no body is created.


Question 4: Class Constructor II

What would be the output of the following program? 

class Nest{
    Nest() {
       System.out.println("Nest");
    }

    Nest(long num) {
       this();
       System.out.println(num);
    }
  
    Nest(int i) {
       this(i);
       System.out.println(i*2);
    }
    
    public static void main(String[] args) {
       int i = 4;
       new Nest(i);
    }
}


Ans:

Compilation Error

Question 5: Class Constructor III

Assume we wanted to make a constructor method in the class, Nut:

class Nut {
   String typeOfNut;
   public Nut(String typeOfNut){
        _______________
   }
}
How would you set the class variable to the argument passed into Nut? Fill in the blank with:

Ans:

this.typeOfNut = typeOfNut;


Question 6: Information Hiding

The practice of hiding the details from the user of what goes on inside of an Object is known as ___________.

Ans:

encapsulation

Question 7: Returning an Object

What is meant by "returning an object" from a method?

Ans:

Question 7: Returning an Object

What is meant by "returning an object" from a method?

Ans:

It means that you are returning the object's address to the caller.


Question 8: Returning an Object II

If an object calls a method, and a new object is created within that method and returned to the caller, the object returned _________.

Ans:

has a different address and possible a different value from the object that called the method

Question 9: Multiple Inheritance

Multiple Inheritance is a feature of some object oriented programming languages, where a class can inherit from more than one parent class. As you learned that Python supports multiple inheritance. What about Java?


Ans:

Java does not support multiple inheritance.

Question 10: Bank Account

Expand the example of BankAcct, SavingAcct in our lecture to have also a class called LoanAcct. LoanAcct is a bank account that has a negative balance that is owed to the bank. It should have an interest rate where interest has to be paid to the bank as and when required, and a credit limit which is the maximum limit on the amount owed to the bank (assuming the amount will not exceed the limit after paying interest). We should be able to transfer money among these various types of accounts.

Ans:

//Subclass
class LoanAcct extends BankAcct
{
	protected double _rate;
	protected double _limit;
	public LoanAcct(int aNum, double bal, double rate, double limit) {
		// Write your code here
		_acctNum = aNum;
		_balance = bal;
		_rate = rate;
		_limit = limit;
		
	}
	//New method in subclass
	public void payInterest() {
		// Write your code here
		_balance += _balance * _rate;
	}
	//Method Overriding
	public boolean withdraw( double amount ) {
		// Write your code here
	    if (_balance - amount < -_limit){
	        return false;
	 }
		else {
		    _balance -= amount;
		    return true;
		    }
	}
	public void deposit( double amount ) {
		// Write your code here
		if (_balance > _limit)
	        return;
		else if ( amount <= 0)
		    return;
		 else
		_balance += amount;
	}
}
public boolean transfer (BankAcct fromAcct, BankAcct toAcct, double amount) {
        
	if (fromAcct.withdraw(amount)) {
		toAcct.deposit(amount);
		return true;
	}
	return false;
}


Question 11: Complex Number class

For the complex number class in our lecture, find out how to do a division of a complex number by another complex number from the web. Then, add to the ComplexCart class a public void divides method, and the ComplexPolar class a public void divides method.


Ans:

public interface Complex { 
	public double realpart ( );        // returns this.real
	public double imagpart( );         // returns this.imag
	public double angle ( );           // returns this.angle
	public double magnitude      ( );  // returns this.mag
	public void  add   (Complex c);    // this = this + c
	public void  minus (Complex c);    // this = this - c
	public void  times (Complex c);    // this = this * c
	public void  divides(Complex c);
}
class ComplexCart implements Complex { 
	private double real;
	private double imag;
	// CONSTRUCTORS 
	public ComplexCart (double r, double i) { real = r; imag = i; }
	// ACCESSORS
	public double realpart ()  {  return this.real; }
	public double imagpart ()  { return this.imag; }
	public double magnitude () { return Math.sqrt(real * real + imag * imag); }  
	public double angle ()  {
		if (real != 0) {
			if (real < 0 ) return (Math.PI + Math.atan(imag/real));
			return Math.atan(imag / real);
		}
		else if (imag == 0) return 0;
		else if (imag > 0) return Math.PI/2; 
		else return -Math.PI/2; 
	}
	// MUTATORS
	public void add (Complex c)  {
		this.real += c.realpart(); 
		this.imag += c.imagpart(); 
	}
	public void minus (Complex c)   { 
		this.real -= c.realpart(); 
		this.imag -= c.imagpart(); 
	}
	public void times (Complex c)   { 
		double tempReal=real*c.realpart() - imag*c.imagpart();    
		imag = real * c.imagpart() + imag * c.realpart(); 
		real = tempReal;
	}
	public void divides (Complex c) {
		// Write your code here
	    double tempReal = (real * c.realpart()) - (imag * -c.imagpart());
	    double tempImag = (real * -c.imagpart()) + (imag * c.realpart());
	    double denom = c.realpart() * c.realpart() + c.imagpart() * c.imagpart();
	    real = tempReal / denom;
	    imag = tempImag / denom;
	}
	// for printing... 
	public String toString() {
		if ( imag == 0 ) return ( realpart() + "");
		else if ( imag < 0 ) 
			return ( real + "" + imag + "i");
		else 
			return ( real + "+" + imag + "i");
	}
}
class ComplexPolar implements Complex {
	private double mag;   // magnitude
	private double ang;   // angle
	// CONSTRUCTORS
	ComplexPolar (double m, double r) { mag = m; ang = r; } 
	// ACCESSORS
	public double realpart ()  { return mag * Math.cos(ang); }
	public double imagpart ()  { return mag * Math.sin(ang); }   
	public double magnitude () { return mag; }
	public double angle ()     { return ang; }
	// MUTATORS
	public void add (Complex c)   {     // this = this + c
		double real =  realpart() + c.realpart();
		double imag =  imagpart() + c.imagpart(); 
		mag = Math.sqrt(real*real + imag*imag);
		if (real != 0) { 
			if (real < 0) ang = (Math.PI + Math.atan(imag/real));
			else ang = Math.atan(imag/real);
		}
		else if (imag == 0) ang = 0;
		else if(imag > 0) ang = Math.PI/2;
		else ang = -Math.PI/2;
	}
	public void minus (Complex c)   {     // this = this - c
		double real =  mag * Math.cos(ang) - c.realpart(); 
		double imag =  mag * Math.sin(ang) - c.imagpart();
		mag = Math.sqrt(real*real + imag*imag);
		if (real != 0) { 
			if (real < 0) ang = (Math.PI + Math.atan(imag/real));
			else ang = Math.atan(imag/real);
		}
		else if (imag == 0) ang = 0;
		else if(imag > 0) ang = Math.PI/2;
		else ang = -Math.PI/2;
	}
	public void times (Complex c)  {   // this = this * c
		mag *= c.magnitude(); 
		ang += c.angle();
		ang = ang % (2*Math.PI); // maintain ang within 2*pi 
	}
	public void divides (Complex c) {
		// Write your code here
		mag /= c.magnitude();
		ang -= c.angle();
		ang = ang % (2*Math.PI); // maintain ang within 2*pi 
	}
	public String toString() {
		if ( imagpart() == 0 ) return ( this.realpart() + "");
		else if ( imagpart() < 0 ) 
			return ( realpart() + "" + imagpart() + "i");
		else 
			return ( realpart() + "+" + imagpart() + "i");
	}
}
